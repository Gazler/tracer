defmodule Tracer.Tool.CallSeq.Event do
  @moduledoc """
  Event generated by the CallSeq tool
  """
  alias __MODULE__

  defstruct type: nil,
            depth: 0,
            pid: nil,
            mod: nil,
            fun: nil,
            arity: nil,
            message: nil,
            return_value: nil

  defimpl String.Chars, for: Event do
    def to_string(%Event{type: :enter} = event) do
      String.duplicate(" ", event.depth) <>
        "-> #{inspect event.mod}.#{event.fun}/#{event.arity} " <>
        "#{message_to_string event.message}"
    end
    def to_string(%Event{type: :exit} = event) do
      String.duplicate(" ", event.depth) <>
        "<- #{inspect event.mod}.#{event.fun}/#{event.arity} " <>
        "#{inspect event.return_value}"
    end

    defp message_to_string(nil), do: ""
    defp message_to_string(term) when is_list(term) do
      term
      |> Enum.map(fn
        [key, val] -> {key, val}
        other -> "#{inspect other}"
      end)
      |> inspect()
    end
  end

end
