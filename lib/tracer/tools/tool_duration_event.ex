defmodule Tracer.Tool.Duration.Event do
  @moduledoc """
  Event generated by the DurationTool
  """
  alias __MODULE__

  defstruct duration: 0,
            pid: nil,
            mod: nil,
            fun: nil,
            arity: nil,
            message: nil

  defimpl String.Chars, for: Event do
    def to_string(event) do
      duration_str = String.pad_trailing(Integer.to_string(event.duration),
                                         20)
      "\t#{duration_str} #{inspect event.pid} " <>
        "#{inspect event.mod}.#{event.fun}/#{event.arity}" <>
        " #{message_to_string event.message}"
    end

    defp message_to_string(nil), do: ""
    defp message_to_string(term) when is_list(term) do
      term
      |> Enum.map(fn
        [key, val] -> {key, val}
        other -> "#{inspect other}"
      end)
      |> inspect()
    end
  end

end
